#include <SoftwareSerial.h>

SoftwareSerial mySerial(11, 12); //RX---11 TX--12

int capval1, capval2, capval3, capval4, capval5, capval6, capval7, capval8;
int capval9, capval10;

int times = 150;   
void setup()

{

  Serial.begin(9600);
  mySerial.begin(9600);
  Serial.println("tahashgiune");

}

void loop ()

{

  capval1 = readCapacitivePin(2);   

  capval2 = readCapacitivePin(3);

  capval3 = readCapacitivePin(4);

  capval4 = readCapacitivePin(5);

  capval5 = readCapacitivePin(6);

  capval6 = readCapacitivePin(7);

  capval7 = readCapacitivePin(8);

  capval8 = readCapacitivePin(9);    

  capval9 = readCapacitivePin(10);    

  capval10 = readCapacitivePin(A0);    

  if (capval1 > 2)
  {
    Serial.write('q');
    mySerial.write('q');
    if (capval1 > 2)
    {
      delay(times);
    }
  }



  if (capval2 > 2)
  {
    Serial.write('w');
    mySerial.write('w');
    if (capval2 > 2)
    {
      delay(times);
    }
  }


  if (capval3 > 2)
  {
    Serial.write('e');
    mySerial.write('e');
    if (capval3 > 2)
    {
      delay(times);
    }
  }



  if (capval4 > 2) {
    Serial.write('r');
    mySerial.write('r');
    if (capval4 > 2)
    {
      delay(times);
    }
  }


  if (capval5 > 2) {
    Serial.write('t');
    mySerial.write('t');
    if (capval5 > 2)
    {
      delay(times);
    }
  }



  if (capval6 > 2) {
    Serial.write('y');
    mySerial.write('y');
    if (capval6 > 2)
    {
      delay(times);
    }
  }


  if (capval7 > 2) {
    Serial.write('u');
    mySerial.write('u');
    if (capval7 > 2)
    {
      delay(times);
    }
  }


  if (capval8 > 2) {
    Serial.write('i');
    mySerial.write('i');
    if (capval8 > 2)
    {
      delay(times);
    }
  }

  if (capval9 > 2) {
    Serial.write('o');
    mySerial.write('o');
    if (capval9 > 2)
    {
      delay(times);
    }
  }
  if (capval10 > 2) {
    Serial.write('o');
    mySerial.write('o');
    if (capval10> 2)
    {
      delay(times);
    }
  }
}

uint8_t readCapacitivePin(int pinToMeasure) {

  // Variables used to translate from Arduino to AVR pin naming

  volatile uint8_t* port;

  volatile uint8_t* ddr;

  volatile uint8_t* pin;

  // Here we translate the input pin number from

  // Arduino pin number to the AVR PORT, PIN, DDR,

  // and which bit of those registers we care about.

  byte bitmask;

  port = portOutputRegister(digitalPinToPort(pinToMeasure));

  ddr = portModeRegister(digitalPinToPort(pinToMeasure));

  bitmask = digitalPinToBitMask(pinToMeasure);

  pin = portInputRegister(digitalPinToPort(pinToMeasure));

  // Discharge the pin first by setting it low and output

  *port &= ~(bitmask);

  *ddr |= bitmask;

  delay(1);

  // Make the pin an input with the internal pull-up on

  *ddr &= ~(bitmask);

  *port |= bitmask;

  // Now see how long the pin to get pulled up. This manual unrolling of the loop

  // decreases the number of hardware cycles between each read of the pin,

  // thus increasing sensitivity.

  uint8_t cycles = 17;

  if (*pin & bitmask)

    cycles = 0;

  else if (*pin & bitmask)

    cycles = 1;

  else if (*pin & bitmask)

    cycles = 2;

  else if (*pin & bitmask)

    cycles = 3;

  else if (*pin & bitmask)

    cycles = 4;

  else if (*pin & bitmask)

    cycles = 5;

  else if (*pin & bitmask)

    cycles = 6;

  else if (*pin & bitmask)

    cycles = 7;

  else if (*pin & bitmask)

    cycles = 8;

  else if (*pin & bitmask)

    cycles = 9;

  else if (*pin & bitmask)

    cycles = 10;

  else if (*pin & bitmask)

    cycles = 11;

  else if (*pin & bitmask)

    cycles = 12;

  else if (*pin & bitmask)

    cycles = 13;

  else if (*pin & bitmask)

    cycles = 14;

  else if (*pin & bitmask)

    cycles = 15;

  else if (*pin & bitmask)

    cycles = 16;

  // Discharge the pin again by setting it low and output

  // It's important to leave the pins low if you want to

  // be able to touch more than 1 sensor at a time - if

  // the sensor is left pulled high, when you touch

  // two sensors, your body will transfer the charge between

  // sensors.

  *port &= ~(bitmask);

  *ddr |= bitmask;

  return cycles;

}
